generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Product {
  id          String      @id @default(uuid()) @db.Uuid
  name        String
  slug        String      @unique(map: "product_slug_index")
  category    String
  description String
  images      String[]
  price       Decimal     @default(0) @db.Decimal(12, 2)
  brand       String
  rating      Decimal     @default(0) @db.Decimal(12, 2)
  numReviews  Int         @default(0)
  stock       Int
  isFeatured  Boolean     @default(false)
  banner      String?
  createdAt   DateTime    @default(now()) @db.Timestamp(6)
  OrderItem   OrderItem[]
  Review      Review[]
  Deal        Deal[]
}

model User {
  id            String    @id @default(uuid()) @db.Uuid
  name          String
  email         String    @unique(map: "user_email_index")
  emailVerified DateTime? @db.Timestamp(6)
  image         String?
  password      String?
  address       Json?     @db.Json
  paymentMethod String?
  role          String    @default("user")
  createdAt     DateTime  @default(now()) @db.Timestamp(6)
  updateAt      DateTime  @updatedAt
  Account       Account[]
  Session       Session[]
  Cart          Cart[]
  Order         Order[]
  Review        Review[]
}

model Account {
  userId            String   @default(uuid()) @db.Uuid
  type              String
  provider          String
  providerId        String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now()) @db.Timestamp(6)
  updateAt          DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @id
  userId       String   @default(uuid()) @db.Uuid
  expires      DateTime @db.Timestamp(6)
  accessToken  String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now()) @db.Timestamp(6)
  updateAt  DateTime @updatedAt
}

model verificationToken {
  identifier String
  token      String   @unique
  expires    DateTime @db.Timestamp(6)

  @@id([identifier, token])
}

model Cart {
  id            String   @id @default(uuid()) @db.Uuid
  userId        String?  @db.Uuid
  sessionCartId String
  items         Json[]   @default([]) @db.Json
  createdAt     DateTime @default(now()) @db.Timestamp(6)
  itemsCount    Int
  user          User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Order {
  id            String      @id @default(uuid()) @db.Uuid
  userId        String      @db.Uuid
  address       Json        @db.Json
  payment       String
  paymentResult Json?       @db.Json
  itemPrice     Decimal     @db.Decimal(12, 2)
  shippingPrice Decimal     @db.Decimal(12, 2)
  taxPrice      Decimal     @db.Decimal(12, 2)
  totalPrice    Decimal     @db.Decimal(12, 2)
  isPaid        Boolean     @default(false)
  isDelivered   Boolean     @default(false)
  paidAt        DateTime?   @db.Timestamp(6)
  deliveredAt   DateTime?   @db.Timestamp(6)
  createdAt     DateTime    @default(now()) @db.Timestamp(6)
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  orderItems    OrderItem[]
}

model OrderItem {
  orderId   String  @db.Uuid
  productId String  @db.Uuid
  qty       Int
  price     Decimal @db.Decimal(12, 2)
  name      String
  slug      String
  image     String
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  dealInfo Json? @db.Json

  @@id([orderId, productId], map: "orderItem_orderId_productId_pk")
}

model Review {
  id                 String   @id @default(uuid()) @db.Uuid
  userId             String   @db.Uuid
  productId          String   @db.Uuid
  rating             Int
  title              String
  description        String
  isVerifiedPurchase Boolean  @default(true)
  createdAt          DateTime @default(now()) @db.Timestamp(6)
  product            Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Deal {
  id          String   @id @default(uuid())
  type        String
  title       String
  description String
  productId   String   @db.Uuid
  discount    Int
  endTime     DateTime
  createdAt   DateTime @default(now())
  isActive    Boolean  @default(false)
  product     Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
}
